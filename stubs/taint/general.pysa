# Dictionary propagation
def dict.__getitem__(self: TaintInTaintOut[LocalReturn], k): ...
def dict.update(self, __m: TaintInTaintOut[Updates[self]]): ...
def dict.get(self: TaintInTaintOut[LocalReturn], key, default = ...): ...

# List propagation
def list.extend(self, iterable: TaintInTaintOut[Updates[self]]): ...
def list.append(self, object: TaintInTaintOut[Updates[self]]): ...
def list.insert(self, index, object: TaintInTaintOut[Updates[self]]): ...

# Set propagation
def set.add(self, element: TaintInTaintOut[Updates[self]]): ...
def set.difference_update(self, *s: TaintInTaintOut[Updates[self]]): ...
def set.intersection_update(self, *s: TaintInTaintOut[Updates[self]]): ...
def set.update(self, *s: TaintInTaintOut[Updates[self]]): ...

# String features
def str.__add__(
  self: TaintInTaintOut[LocalReturn, Via[string_concat_lhs]],
  s: TaintInTaintOut[Via[string_concat_rhs]],
): ...

# XML sinks
def lxml.etree.fromstring(input: TaintSink[XMLParser]): ...

# Redirects
def django.http.response.HttpResponseRedirect.__init__(self, redirect_to: TaintSink[Redirect], *args, **kwargs): ...
def django.http.response.HttpResponsePermanentRedirect.__init__(self, redirect_to: TaintSink[Redirect], *args, **kwargs): ...

# GetAttr
def getattr(
    __o: TaintInTaintOut[Via[getattr]],
    name: TaintSink[GetAttr],
    __default: TaintInTaintOut[LocalReturn],
): ...

def io.BytesIO.__init__(self, initial_bytes: TaintInTaintOut[Via[bytesio]]): ...
