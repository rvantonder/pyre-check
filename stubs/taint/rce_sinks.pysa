# RCE sinks
def eval(__source: TaintSink[RemoteCodeExecution], __globals, __locals): ...
def exec(__object: TaintSink[RemoteCodeExecution], __globals, __locals): ...
def importlib.import_module(name: TaintSink[RemoteCodeExecution], package=...): ...
def __import__(
  name: TaintSink[RemoteCodeExecution],
  globals=...,
  locals=...,
  fromlist=...,
  level=...,
): ...
def pickle.loads(
  bytes_object: TaintSink[RemoteCodeExecution],
  *,
  fix_imports=...,
  encoding=...,
  errors=...,
): ...
def yaml.load(
  stream: TaintSink[RemoteCodeExecution],
  Loader=...,
): ...

def subprocess.getstatusoutput(cmd: TaintSink[RemoteCodeExecution]): ...

def subprocess.getoutput(cmd: TaintSink[RemoteCodeExecution]): ...

def subprocess.Popen.__init__(
  self,
  args: TaintSink[RemoteCodeExecution],
  bufsize,
  executable: TaintSink[RemoteCodeExecution],
  stdin,
  stdout,
  stderr,
  preexec_fn: TaintSink[RemoteCodeExecution],
  close_fds,
  shell: TaintSink[RemoteCodeExecution],
  cwd: TaintSink[RemoteCodeExecution],
  env: TaintSink[RemoteCodeExecution],
  universal_newlines,
  startupinfo,
  creationflags,
  restore_signals,
  start_new_session,
  pass_fds,
  *,
  encoding,
  errors
): ...
