{
  comment: "UserControlled, Test, Demo sources are predefined. Same for Demo, Test and RemoteCodeExecution sinks",

  sources: [
  ],

  sinks: [
    {
      name: "FileSystem",
      comment: "use to annotate where data flows into file system"
    },
    {
      name: "GetAttr",
      comment: "used to annotate `getattr` function"
    },
    {
      name: "Logging",
      comment: "use to annotate where data is logged"
    },
    {
      name: "Redirect",
      comment: "use to annotate where data influences a redirect sent to the user"
    },
    {
      name: "RequestSend",
      comment: "use to annotate where data influences request sending"
    },
    {
      name: "ReturnedToUser",
      comment: "use to annotate locations where data is returned to users"
    },
    {
      name: "SQL",
      comment: "use to annotate places of SQL injection risk"
    },
    {
      name: "XMLParser",
      comment: "use to annotate where data is parsed for XML"
    }
  ],

  features: [
    {
      name: "getattr",
      comment: "via getattr first parameter"
    },
    {
      name: "request_files",
      comment: "via django request.FILES"
    },
    {
      name: "bytesio",
      comment: "via io.BytesIO object"
    },
    {
      name: "string_concat_lhs",
      comment: "via a string created by tainted_str + 's'"
    },
    {
      name: "string_concat_rhs",
      comment: "via a string created by 's' + tainted_str"
    }
  ],

  rules: [
    {
      name: "Possible shell injection",
      code: 5001,
      sources:[ "UserControlled" ],
      sinks: [ "RemoteCodeExecution" ],
      message_format: "Data from [{$sources}] source(s) may reach [{$sinks}] sink(s)"
    },
    {
      name: "Test flow",
      code: 5002,
      sources: [ "Test", "UserControlled" ],
      sinks: [ "Test" ],
      message_format: "Data from [{$sources}] source(s) may reach [{$sinks}] sink(s)"
    },
    {
      name: "SQL injection.",
      code: 5005,
      sources: [ "UserControlled" ],
      sinks: [ "SQL" ],
      message_format: "Data from [{$sources}] source(s) may reach [{$sinks}] sink(s)"
    },
    {
      name: "User data to XML Parser.",
      code: 5007,
      sources: [ "UserControlled" ],
      sinks: [ "XMLParser" ],
      message_format: "Data from [{$sources}] source(s) may reach [{$sinks}] sink(s)"
    },
    {
      name: "Demo flow",
      code: 5009,
      sources: [ "Demo" ],
      sinks: [ "Demo" ],
      message_format: "Data from [{$sources}] source(s) may reach [{$sinks}] sink(s)"
    },
    {
      name: "User data to getattr",
      code: 5010,
      sources: [ "UserControlled" ],
      sinks: [ "GetAttr" ],
      message_format: "Attacker may control at least one argument to getattr(,)."
    },
    {
      name: "User data to filesystem operation",
      code: 5011,
      sources: [ "UserControlled" ],
      sinks: [ "FileSystem" ],
      message_format: "Data from [{$sources}] source(s) may reach [{$sinks}] sink(s)"
    },
    {
      name: "Potential Server-side request forgery (SSRF)",
      code: 5012,
      sources: [ "UserControlled" ],
      sinks: [ "RequestSend" ],
      message_format: "Data from [{$sources}] source(s) may reach [{$sinks}] sink(s)"
    },
    {
      name: "Open redirect",
      code: 5018,
      sources: [ "UserControlled" ],
      sinks: [ "Redirect" ],
      message_format: "Data from [{$sources}] source(s) may be used in an open redirect via [{$sinks}] sink(s)"
    }
  ]
}
